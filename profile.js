document.addEventListener('DOMContentLoaded', function() {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è
    const username = localStorage.getItem('gamezone_username') || "–ì—Ä–∞–≤–µ—Ü—å";
    const avatar = localStorage.getItem('gamezone_avatar') || "üë§";
    const regDate = localStorage.getItem('gamezone_regdate') || new Date().toISOString();
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    document.getElementById('username-input').value = username;
    document.getElementById('current-avatar').textContent = avatar;
    document.getElementById('reg-date').textContent = new Date(regDate).toLocaleDateString();
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    loadStats();
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∞–≤–∞—Ç–∞—Ä–∞
    document.querySelectorAll('.avatar-option').forEach(option => {
        option.addEventListener('click', function() {
            const emoji = this.dataset.emoji;
            document.getElementById('current-avatar').textContent = emoji;
        });
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
    document.getElementById('save-profile').addEventListener('click', function() {
        const newUsername = document.getElementById('username-input').value.trim();
        const newAvatar = document.getElementById('current-avatar').textContent;
        
        if (newUsername.length < 2 || newUsername.length > 20) {
            alert("–Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 2 –¥–æ 20 —Å–∏–º–≤–æ–ª—ñ–≤");
            return;
        }
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
        localStorage.setItem('gamezone_username', newUsername);
        localStorage.setItem('gamezone_avatar', newAvatar);
        
        // –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        if (!localStorage.getItem('gamezone_regdate')) {
            localStorage.setItem('gamezone_regdate', new Date().toISOString());
        }
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Ö–µ–¥–µ—Ä
        document.getElementById('username').textContent = newUsername;
        document.getElementById('user-avatar').textContent = newAvatar;
        
        alert("–ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!");
    });
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
    loadAchievements();
});

function loadStats() {
    const username = localStorage.getItem('gamezone_username');
    
    // –ö–æ—Å–º—ñ—á–Ω—ñ –ø–µ—Ä–µ–≥–æ–Ω–∏
    let spaceRatings = JSON.parse(localStorage.getItem('gamezone_space-race_ratings')) || [];
    let spaceBest = spaceRatings.filter(r => r.name === username).sort((a, b) => b.score - a.score)[0];
    document.getElementById('space-stat').textContent = spaceBest ? spaceBest.score : '0';
    
    // –ï–º–æ–¥–∑—ñ-–ø–∞–∑–ª
    let emojiRatings = JSON.parse(localStorage.getItem('gamezone_emoji-match_ratings')) || [];
    let emojiBest = emojiRatings.filter(r => r.name === username).sort((a, b) => b.score - a.score)[0];
    document.getElementById('emoji-stat').textContent = emojiBest ? emojiBest.score : '0';
    
    // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–≥–æ—Ä
    let totalGames = spaceRatings.filter(r => r.name === username).length + 
                    emojiRatings.filter(r => r.name === username).length;
    document.getElementById('total-games').textContent = totalGames;

    let guessRatings = JSON.parse(localStorage.getItem('gamezone_guess-number_ratings')) || [];
    let guessBest = guessRatings.filter(r => r.name === username).sort((a, b) => b.score - a.score)[0];
    document.getElementById('guess-stat').textContent = guessBest ? guessBest.score : '0';
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–≥–æ—Ä
    totalGames += guessRatings.filter(r => r.name === username).length;
    document.getElementById('total-games').textContent = totalGames;
}

function loadAchievements() {
    const username = localStorage.getItem('gamezone_username');
    const achievementsGrid = document.getElementById('achievements-grid');
    
    const achievements = [
        {
            id: 'first-game',
            name: '–ü–µ—Ä—à–∞ –≥—Ä–∞',
            emoji: 'üéÆ',
            desc: '–ó—ñ–≥—Ä–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä—à—É –≥—Ä—É',
            check: () => localStorage.getItem('gamezone_regdate') !== null
        },
        {
            id: 'space-pro',
            name: '–ö–æ—Å–º—ñ—á–Ω–∏–π –∞—Å',
            emoji: 'üöÄ',
            desc: '–ù–∞–±–µ—Ä—ñ—Ç—å 500+ –±–∞–ª—ñ–≤ —É –∫–æ—Å–º—ñ—á–Ω–∏—Ö –ø–µ—Ä–µ–≥–æ–Ω–∞—Ö',
            check: () => {
                const ratings = JSON.parse(localStorage.getItem('gamezone_space-race_ratings')) || [];
                return ratings.some(r => r.name === username && r.score >= 500);
            }
        },
        {
            id: 'memory-master',
            name: '–ú–∞–π—Å—Ç–µ—Ä –ø–∞–º\'—è—Ç—ñ',
            emoji: 'üß†',
            desc: '–ó–Ω–∞–π–¥—ñ—Ç—å –≤—Å—ñ –ø–∞—Ä–∏ –º–µ–Ω—à –Ω—ñ–∂ –∑–∞ 20 —Ö–æ–¥—ñ–≤',
            check: () => {
                const ratings = JSON.parse(localStorage.getItem('gamezone_emoji-match_ratings')) || [];
                return ratings.some(r => r.name === username && r.score >= 50);
            }
        },
        {
            id: 'regular-player',
            name: '–ü–æ—Å—Ç—ñ–π–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å',
            emoji: 'üèÜ',
            desc: '–ó—ñ–≥—Ä–∞–π—Ç–µ 10+ —ñ–≥–æ—Ä',
            check: () => {
                const space = JSON.parse(localStorage.getItem('gamezone_space-race_ratings')) || [];
                const emoji = JSON.parse(localStorage.getItem('gamezone_emoji-match_ratings')) || [];
                return (space.filter(r => r.name === username).length + 
                        emoji.filter(r => r.name === username).length) >= 10;
            }
        }
    ];
    
    achievements.push(
        {
            id: 'number-master',
            name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫',
            emoji: 'üßÆ',
            desc: '–í–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –∑ —Ä—ñ–∑–Ω–∏—Ü–µ—é –Ω–µ –±—ñ–ª—å—à–µ 5',
            check: () => {
                const ratings = JSON.parse(localStorage.getItem('gamezone_guess-number_ratings')) || [];
                return ratings.some(r => r.name === username && r.score >= 95);
            }
        },
        {
            id: 'perfect-guess',
            name: '–¢–µ–ª–µ–ø–∞—Ç',
            emoji: 'üîÆ',
            desc: '–í–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ —Ç–æ—á–Ω–æ',
            check: () => {
                const ratings = JSON.parse(localStorage.getItem('gamezone_guess-number_ratings')) || [];
                return ratings.some(r => r.name === username && r.score === 100);
            }
        }
    );
    
    achievements.forEach(ach => {
        const isUnlocked = ach.check();
        
        const achievementEl = document.createElement('div');
        achievementEl.className = `achievement ${isUnlocked ? 'unlocked' : ''}`;
        achievementEl.innerHTML = `
            <div class="achievement-icon">${ach.emoji}</div>
            <div class="achievement-name">${ach.name}</div>
            <div class="achievement-desc">${ach.desc}</div>
        `;
        
        achievementsGrid.appendChild(achievementEl);
    });
}