document.addEventListener('DOMContentLoaded', function() {
    const gameCards = document.querySelectorAll('.game-card');
    const gameScreen = document.getElementById('game-screen');
    const gameContainer = document.getElementById('game-container');
    const backButton = document.querySelector('.back-button');
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –≥—Ä–∏
    gameCards.forEach(card => {
        card.addEventListener('click', function() {
            const gameType = this.dataset.game;
            showGame(gameType);
        });
    });
    
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    backButton.addEventListener('click', function() {
        gameScreen.classList.add('hidden');
        gameCards.forEach(card => card.style.display = 'flex');
    });
    
    function showGame(gameType) {
        gameCards.forEach(card => card.style.display = 'none');
        gameScreen.classList.remove('hidden');
        gameContainer.innerHTML = '';
        
        switch(gameType) {
            case 'space-race':
                initSpaceRace();
                break;
            case 'emoji-match':
                initEmojiMatch();
                break;
            case 'guess-number':
                initGuessNumber();
                break;
        }
    }
    
    // –ì—Ä–∞ "–ö–æ—Å–º—ñ—á–Ω—ñ –ø–µ—Ä–µ–≥–æ–Ω–∏"
    function initSpaceRace() {
        gameContainer.innerHTML = `
            <div class="space-game">
                <h2>–ö–æ—Å–º—ñ—á–Ω—ñ –ø–µ—Ä–µ–≥–æ–Ω–∏</h2>
                <p>–®–≤–∏–¥–∫–æ –Ω–∞—Ç–∏—Å–∫–∞–π –ø—Ä–æ–±—ñ–ª, —â–æ–± –æ–±—ñ–≥–Ω–∞—Ç–∏ —Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤!</p>
                <div class="race-track" id="race-track"></div>
                <div class="race-stats">
                    <p>–®–≤–∏–¥–∫—ñ—Å—Ç—å: <span id="speed">0</span> –∫–º/—Å</p>
                    <p>–ü—Ä–æ–π–¥–µ–Ω–æ: <span id="distance">0</span> –∫–º</p>
                </div>
                <div class="race-controls">
                    <button class="race-button" id="start-race">–ü–æ—á–∞—Ç–∏ –≥—Ä—É</button>
                    <button class="race-button" id="boost" disabled>–ë—É—Å—Ç (–ø—Ä–æ–±—ñ–ª)</button>
                </div>
            </div>
        `;
        
        const raceTrack = document.getElementById('race-track');
        const startButton = document.getElementById('start-race');
        const boostButton = document.getElementById('boost');
        const speedDisplay = document.getElementById('speed');
        const distanceDisplay = document.getElementById('distance');
        
        let playerSpeed = 0;
        let playerDistance = 0;
        let raceInterval;
        let isRacing = false;
        let opponents = [];
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞–≤—Ü—è
        const player = document.createElement('div');
        player.className = 'racer player';
        player.textContent = 'üöÄ';
        player.style.top = '50%';
        raceTrack.appendChild(player);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤
        function createOpponents() {
            opponents = [];
            const positions = ['20%', '40%', '60%', '80%'];
            
            positions.forEach(pos => {
                const opponent = document.createElement('div');
                opponent.className = 'racer';
                opponent.style.top = pos;
                opponent.textContent = ['üõ∏', 'üëΩ', 'üõ∞Ô∏è', 'üåå'][Math.floor(Math.random() * 4)];
                raceTrack.appendChild(opponent);
                opponents.push({
                    element: opponent,
                    speed: Math.random() * 2 + 1,
                    distance: 0
                });
            });
            
            // –§—ñ–Ω—ñ—à–Ω–∞ –ª—ñ–Ω—ñ—è
            const finishLine = document.createElement('div');
            finishLine.className = 'finish-line';
            raceTrack.appendChild(finishLine);
        }
        
        // –ü–æ—á–∞—Ç–æ–∫ –≥—Ä–∏
        startButton.addEventListener('click', function() {
            if (isRacing) return;
            
            isRacing = true;
            startButton.disabled = true;
            boostButton.disabled = false;
            playerSpeed = 1;
            playerDistance = 0;
            
            // –û—á–∏—â–∞—î–º–æ —Ç—Ä–µ–∫
            raceTrack.innerHTML = '';
            raceTrack.appendChild(player);
            createOpponents();
            
            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É
            raceInterval = setInterval(updateRace, 50);
            
            // –û–±—Ä–æ–±–Ω–∏–∫ –ø—Ä–æ–±—ñ–ª—É –¥–ª—è –±—É—Å—Ç—É
            document.addEventListener('keydown', spaceBoost);
        });
        
        // –ë—É—Å—Ç –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –ø—Ä–æ–±—ñ–ª—É
        function spaceBoost(e) {
            if (e.code === 'Space' && isRacing) {
                playerSpeed += 0.5;
                boostButton.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    boostButton.style.transform = 'scale(1)';
                }, 100);
            }
        }
        
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∏
        function updateRace() {
            // –†—É—Ö –≥—Ä–∞–≤—Ü—è
            playerDistance += playerSpeed;
            player.style.left = `${20 + (playerDistance / 500) * 70}%`;
            
            // –†—É—Ö —Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤
            let allFinished = true;
            opponents.forEach(opp => {
                opp.distance += opp.speed;
                opp.element.style.left = `${20 + (opp.distance / 500) * 70}%`;
                
                if (opp.distance < 500) allFinished = false;
            });
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ñ—ñ–Ω—ñ—à
            if (playerDistance >= 500 || allFinished) {
                endRace(playerDistance >= 500);
                return;
            }
            
            // –ì–∞–ª—å–º—É–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è
            playerSpeed = Math.max(1, playerSpeed * 0.99);
            
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            speedDisplay.textContent = Math.round(playerSpeed * 100);
            distanceDisplay.textContent = Math.round(playerDistance);
        }
        
        // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
        function endRace(isWinner) {
            clearInterval(raceInterval);
            isRacing = false;
            startButton.disabled = false;
            boostButton.disabled = true;
            document.removeEventListener('keydown', spaceBoost);
            
            const score = Math.round(playerDistance * playerSpeed);
            
            if (isWinner) {
                alert(`–ü–µ—Ä–µ–º–æ–≥–∞! –¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: ${score}`);
            } else {
                alert(`–ì—Ä—É –∑–∞–∫—ñ–Ω—á–µ–Ω–æ! –¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: ${score}`);
            }
            
            saveGameResult('space-race', score);
        }
    }
    
    // –ì—Ä–∞ "–ï–º–æ–¥–∑—ñ-–ø–∞–∑–ª"
    function initEmojiMatch() {
        const emojis = ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº'];
        const cards = [...emojis, ...emojis];
        
        // –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –∫–∞—Ä—Ç–∫–∏
        for (let i = cards.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [cards[i], cards[j]] = [cards[j], cards[i]];
        }
        
        gameContainer.innerHTML = `
            <div class="emoji-game">
                <h2>–ï–º–æ–¥–∑—ñ-–ø–∞–∑–ª</h2>
                <p>–ó–Ω–∞–π–¥–∏ –≤—Å—ñ –ø–∞—Ä–∏ –æ–¥–Ω–∞–∫–æ–≤–∏—Ö —Å–º–∞–π–ª—ñ–≤!</p>
                <div class="memory-game" id="memory-game"></div>
                <div class="memory-stats">
                    <p>–ó–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä: <span id="pairs">0</span>/8</p>
                    <p>–•–æ–¥–∏: <span id="moves">0</span></p>
                </div>
                <div class="memory-controls">
                    <button class="race-button" id="restart">–ü–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É</button>
                </div>
            </div>
        `;
        
        const memoryGame = document.getElementById('memory-game');
        const pairsDisplay = document.getElementById('pairs');
        const movesDisplay = document.getElementById('moves');
        const restartButton = document.getElementById('restart');
        
        let flippedCards = [];
        let matchedPairs = 0;
        let moves = 0;
        let canFlip = true;
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç–∫–∏
        cards.forEach((emoji, index) => {
            const card = document.createElement('div');
            card.className = 'memory-card';
            card.dataset.index = index;
            card.dataset.emoji = emoji;
            card.addEventListener('click', flipCard);
            memoryGame.appendChild(card);
        });
        
        // –ü–µ—Ä–µ–≤–µ—Ä—Ç–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏
        function flipCard() {
            if (!canFlip || this.classList.contains('flipped') || this.classList.contains('matched')) {
                return;
            }
            
            this.classList.add('flipped');
            this.textContent = this.dataset.emoji;
            flippedCards.push(this);
            
            if (flippedCards.length === 2) {
                canFlip = false;
                moves++;
                movesDisplay.textContent = moves;
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–∞—Ä–∞
                if (flippedCards[0].dataset.emoji === flippedCards[1].dataset.emoji) {
                    // –ó–Ω–∞–π—à–ª–∏ –ø–∞—Ä—É
                    flippedCards.forEach(card => {
                        card.classList.add('matched');
                        card.classList.remove('flipped');
                    });
                    
                    matchedPairs++;
                    pairsDisplay.textContent = matchedPairs;
                    flippedCards = [];
                    canFlip = true;
                    
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞
                    if (matchedPairs === emojis.length) {
                        setTimeout(() => {
                            const score = Math.max(1, Math.round(1000 / moves));
                            alert(`–í—ñ—Ç–∞—î–º–æ! –í–∏ –∑–Ω–∞–π—à–ª–∏ –≤—Å—ñ –ø–∞—Ä–∏ –∑–∞ ${moves} —Ö–æ–¥—ñ–≤! –†–∞—Ö—É–Ω–æ–∫: ${score}`);
                            saveGameResult('emoji-match', score);
                        }, 500);
                    }
                } else {
                    // –ù–µ –ø–∞—Ä–∞ - –ø–µ—Ä–µ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–∑–∞–¥
                    setTimeout(() => {
                        flippedCards.forEach(card => {
                            card.classList.remove('flipped');
                            card.textContent = '';
                        });
                        
                        flippedCards = [];
                        canFlip = true;
                    }, 1000);
                }
            }
        }
        
        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
        restartButton.addEventListener('click', function() {
            memoryGame.innerHTML = '';
            flippedCards = [];
            matchedPairs = 0;
            moves = 0;
            pairsDisplay.textContent = '0';
            movesDisplay.textContent = '0';
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –∫–∞—Ä—Ç–∫–∏
            cards.forEach((emoji, index) => {
                const card = document.createElement('div');
                card.className = 'memory-card';
                card.dataset.index = index;
                card.dataset.emoji = emoji;
                card.addEventListener('click', flipCard);
                memoryGame.appendChild(card);
            });
        });
    }
});

function initGuessNumber() {
    gameContainer.innerHTML = `
        <div class="guess-game">
            <h2>–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ</h2>
            <p>–ó–∞–≥–∞–¥–∞–π —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 100 —ñ —Å–ø—Ä–æ–±—É–π –≤–≥–∞–¥–∞—Ç–∏!</p>
            
            <div class="guess-container">
                <div class="guess-input">
                    <input type="number" id="number-input" min="0" max="100" placeholder="0-100">
                    <button id="guess-button">–°–ø—Ä–æ–±—É–≤–∞—Ç–∏</button>
                </div>
                
                <div class="guess-result" id="guess-result">
                    <div class="guess-message">–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–°–ø—Ä–æ–±—É–≤–∞—Ç–∏"</div>
                    <div class="guess-score">–ú–æ–∂–ª–∏–≤–∏–π –≤–∏–≥—Ä–∞—à: <span id="possible-score">0</span> –±–∞–ª—ñ–≤</div>
                </div>
                
                <div class="guess-history" id="guess-history"></div>
            </div>
            
            <div class="guess-stats">
                <p>–°–ø—Ä–æ–±–∏: <span id="attempts">0</span></p>
                <p>–ù–∞–π–∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <span id="best-score">0</span></p>
            </div>
        </div>
    `;
    
    const numberInput = document.getElementById('number-input');
    const guessButton = document.getElementById('guess-button');
    const guessResult = document.getElementById('guess-result');
    const guessHistory = document.getElementById('guess-history');
    const attemptsDisplay = document.getElementById('attempts');
    const bestScoreDisplay = document.getElementById('best-score');
    const possibleScoreDisplay = document.getElementById('possible-score');
    
    let secretNumber = Math.floor(Math.random() * 101);
    let attempts = 0;
    let bestScore = 0;
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –º–æ–∂–ª–∏–≤–∏–π –≤–∏–≥—Ä–∞—à –ø—Ä–∏ –∑–º—ñ–Ω—ñ —á–∏—Å–ª–∞
    numberInput.addEventListener('input', function() {
        const num = parseInt(this.value);
        if (isNaN(num) || num < 0 || num > 100) {
            possibleScoreDisplay.textContent = '0';
            return;
        }
        
        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –º–æ–∂–ª–∏–≤–∏–π –≤–∏–≥—Ä–∞—à (100 –±–∞–ª—ñ–≤ –∑–∞ —Ç–æ—á–Ω–µ –≤–≥–∞–¥—É–≤–∞–Ω–Ω—è)
        const diff = Math.abs(num - secretNumber);
        const score = diff === 0 ? 100 : Math.max(0, 100 - diff);
        possibleScoreDisplay.textContent = score;
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–ø—Ä–æ–±–∏
    guessButton.addEventListener('click', function() {
        const num = parseInt(numberInput.value);
        
        if (isNaN(num) || num < 0 || num > 100) {
            alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 100");
            return;
        }
        
        attempts++;
        attemptsDisplay.textContent = attempts;
        
        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const diff = Math.abs(num - secretNumber);
        const score = diff === 0 ? 100 : Math.max(0, 100 - diff);
        
        if (score > bestScore) {
            bestScore = score;
            bestScoreDisplay.textContent = bestScore;
        }
        
        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        let message = '';
        if (diff === 0) {
            message = `–í—ñ—Ç–∞—î–º–æ! –í–∏ –≤–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ ${secretNumber} —ñ –æ—Ç—Ä–∏–º–∞–ª–∏ 100 –±–∞–ª—ñ–≤!`;
            guessResult.style.backgroundColor = 'rgba(0, 184, 148, 0.2)';
        } else if (diff <= 5) {
            message = `–î—É–∂–µ –≥–∞—Ä–Ω–æ! –í–∏ –±–ª–∏–∑—å–∫–æ (${num}). –†—ñ–∑–Ω–∏—Ü—è: ${diff}. –í–∏–≥—Ä–∞—à: ${score} –±–∞–ª—ñ–≤`;
            guessResult.style.backgroundColor = 'rgba(0, 184, 148, 0.1)';
        } else if (diff <= 15) {
            message = `–ù–µ–ø–æ–≥–∞–Ω–æ! –í–∞—à–µ —á–∏—Å–ª–æ (${num}). –†—ñ–∑–Ω–∏—Ü—è: ${diff}. –í–∏–≥—Ä–∞—à: ${score} –±–∞–ª—ñ–≤`;
            guessResult.style.backgroundColor = 'rgba(253, 203, 110, 0.1)';
        } else {
            message = `–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ! –í–∞—à–µ —á–∏—Å–ª–æ (${num}). –†—ñ–∑–Ω–∏—Ü—è: ${diff}. –í–∏–≥—Ä–∞—à: ${score} –±–∞–ª—ñ–≤`;
            guessResult.style.backgroundColor = 'rgba(255, 118, 117, 0.1)';
        }
        
        guessResult.querySelector('.guess-message').textContent = message;
        
        // –î–æ–¥–∞—î–º–æ —Å–ø—Ä–æ–±—É –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        const attemptItem = document.createElement('div');
        attemptItem.className = 'attempt-item';
        attemptItem.innerHTML = `
            <span>–°–ø—Ä–æ–±–∞ ${attempts}:</span>
            <span>${num}</span>
            <span>–†—ñ–∑–Ω–∏—Ü—è: ${diff}</span>
            <span>–ë–∞–ª–∏: ${score}</span>
        `;
        guessHistory.prepend(attemptItem);
        
        // –Ø–∫—â–æ –≤–≥–∞–¥–∞–ª–∏ - –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–æ–≤—É –≥—Ä—É
        if (diff === 0) {
            setTimeout(() => {
                if (confirm("–í—ñ—Ç–∞—î–º–æ! –•–æ—á–µ—Ç–µ –∑—ñ–≥—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑?")) {
                    startNewGame();
                } else {
                    saveGameResult('guess-number', score);
                }
            }, 500);
        }
    });
    
    function startNewGame() {
        secretNumber = Math.floor(Math.random() * 101);
        attempts = 0;
        attemptsDisplay.textContent = '0';
        guessHistory.innerHTML = '';
        numberInput.value = '';
        possibleScoreDisplay.textContent = '0';
        guessResult.querySelector('.guess-message').textContent = '–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–°–ø—Ä–æ–±—É–≤–∞—Ç–∏"';
        guessResult.style.backgroundColor = 'transparent';
    }
}